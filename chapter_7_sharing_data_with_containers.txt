1, Tạo data volumn từ dockerfile

FROM ubuntu:16.04
VOLUME /MountPointDemo

sudo docker build -t mount-point-demo .

sudo docker inspect mount-point-demo

"Volumes": {
                "/MountPointDemo": {}
            },


$ sudo docker run --rm -it mount-point-demo

--rm là để xóa container khi nó bị stop
-it là để lauch container trong chế độ interactive

# ls -ld /MountPointDemo

drwxr-xr-x 2 root root 4096 Feb 20 16:51 /MountPointDemo

data volumn là 1 phần của docker host filesystem và nó được  mounted:

mount | grep MountPointDemo
/dev/sda8 on /MountPointDemo type ext4 (rw,relatime,errors=remount-ro,data=ordered)

sudo docker inspect -f '{{json .Mounts}}' ecc25faa22f4

[{"Type":"volume","Name":"ad9c2c8668fc55619584c7f0ace7a4638e5d895e886e702df2038096d4a6590a","Source":"/var/lib/docker/volumes/ad9c2c8668fc55619584c7f0ace7a4638e5d895e886e702df2038096d4a6590a/_data","Destination":"/MountPointDemo","Driver":"local","Mode":"","RW":true,"Propagation":""}]


2, taọ data volumn từ 'sudo docker run -v'

 sudo docker run -v /MountPointDemo -it ubuntu:16.04

Docker tự động tạo volumn tại thư mục /var/lib/docker/volumes và mount nó tới container 

khi container bị xóa bởi 'sudo docker rm ' thì docker ko remove volume mà đã tạo ra trong quá trình lauched.
Hành vi này được thiết kế để đảm bảo trạng thái ứng dụng của container mà đã được lưu trong volume filesystem. 
Nếu muốn remove volume có thể thêm option -v trong quá trình remove container

sudo docker rm -v 8d22f73b5b46


Nếu container vẫn đang run thì có thể remove container cũng như autogenerated thư mục bằng việc thêm -f option

sudo docker rm -fv 8d22f73b5b46


==========================

3, Command quản lý volumne

3.1, Các volumne plugins

https://docs.docker.com/engine/extend/legacy_plugins/

3.2, Sub commands của 'docker volume'

- create:  Tạo 1 new volume
- inspect: hiển thị thông tin chi tiết về 1 hoặc nhiều volumnes
- ls: liệt kê các volume trong docker host
- rm: remove 1 volume

Examples:

$ sudo docker volume create 

=> f5385320304da66dc35bb93ca64bc82e93c813fe3115957413d01fc16f5add22  (mã 64-hex được sinh tự động như tên của volume)

- Có thể đặt tên meaningful cho volume dùng '--name' option

$ sudo docker volume create --name example

=> example

$ sudo docker volume ls

=>

DRIVER              VOLUME NAME
local               e860cc8b3e6290749aacb4d1eb0e832670557771b914f8343d686d4c48c92450
local               example
local               f5385320304da66dc35bb93ca64bc82e93c813fe3115957413d01fc16f5add22


$ sudo docker volume inspect example
[
    {
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/example/_data",
        "Name": "example",
        "Options": {},
        "Scope": "local"
    }
]


$ sudo docker volume rm example

=> example



===========================================================

4, Sharing host data 

Docker xem sét host directory hoặc file mounting dễ dàng thông qua -v option của 'docker run' subcommand. '-v' option
có 5 formats, sau:

-v <container mount path>
-v <host path>:<container mount path>
-v <host path>:<container mount path>:<read write mode>
-v <volume name>:<container mount path>
-v <volume name>:<container mount path>:<read write mode>

read write mode có thể là 'ro' hoặc 'rw'

format 1: Tạo 1 mount point trong quá trình lauch container. second và third format cho phép mount 1 file hoặc 1 thư mục từ
docker host tới container mount point. format thứ tư và thứ 5 cho phép mount các volume đã tạo dùng docker volume create 


4.1, Mount 1 folder từ docker host tới 1 container 


$ sudo docker run -v /tmp/hostdir:/MountPoint -it ubuntu:16.04

mount thư mục /tmp/hostdir từ docker host tới container mount point đồng thời bật chế độ interactive
nếu thư mục /tmp/hostdir chưa được tạo thì docker sẽ tự động tạo

$ ls -ld /MountPoint
$ mount | grep MountPoint
$ cd MountPoint/
$ touch a
$ touch b
$ touch c

Từ cửa sổ terminal khác trên docker host kiểm tra thư mục /tmp/hostdir

sudo ls -l /tmp/hostdir

=>

-rw-r--r-- 1 root root 0 Th02 25 16:15 a
-rw-r--r-- 1 root root 0 Th02 25 16:15 b
-rw-r--r-- 1 root root 0 Th02 25 16:15 c

- run 'docker inspect' để kiểm tra thư mục đang mapping được set up giữa docker host và container mount point 

$ sudo docker inspect --format='{{json .Mounts}}' 872905f86c19

=>

[{"Type":"bind","Source":"/tmp/hostdir","Destination":"/MountPoint","Mode":"","RW":true,"Propagation":""}]

Như vậy thư mục /tmp/hostdir của docker host được mount tới /MountPoint của container 

=======================================================

4.2, Mount 1 file từ docker host tới 1 container, update file từ container và xác thực trên docker host 

- File phải tồn tại trong docker host

$ touch /tmp/hostfile.txt

- Mount file này tới container

$ sudo docker run -v /tmp/hostfile.txt:/mntfile.txt -it ubuntu:16.04

- Kiểm tra sự tồn tại của file mntfile.txt trên container

$ ls -l /mntfile.txt

-rw-rw-r-- 1 1000 1000 0 Feb 25 09:34 /mntfile.txt

- Check mount detail dùng mount command

$ mount | grep mntfile

/dev/sda8 on /mntfile.txt type ext4 (rw,relatime,errors=remount-ro,data=ordered)

- update nội dung file /mntfile.txt

$ echo 'Writing from Container' > mntfile.txt

- Kiểm tra nội dung file /tmp/hostfile.txt bên docker host

$ cat /tmp/hostfile.txt

Writing from Container

- run 'docker inspect' để kiểm tra file mapping giữa dockẻ host và container mount point:

$ sudo docker inspect --format='{{json .Mounts}}' 99424722ff3c

[{"Type":"bind","Source":"/tmp/hostfile.txt","Destination":"/mntfile.txt","Mode":"","RW":true,"Propagation":""}]

output cho ta thấy /tmp/hostfile.txt từ docker host được mount tới /mntfile.txt trong container

4.3, Tạo 1 docker volume và mount a named data volume tới container. 

- tạo named data volume

$ docker volume create --name namedval

- mount namedval tới /MountPoint của container

$ sudo docker run -v namedval:/MountPoint -it ubuntu:16.04

Trong quá trình lauch container, Docker tạo namedval nếu nó chưa được tạo

=======================================================================

5, Vấn đề thực tế của host data sharing

Trong chapter trước chúng ta đã lauched 1 http service trong 1 docker container. Nhưng log file vẫn nằm trong container, và ko thể access từ docker host. Trong phần này ta sẽ tìm cách access log file
từ docker host 

- Lauch container từ apache image với -v option để mount /var/log/myhttpd của docker host
tới /var/log/apache2 của container

$ sudo docker run -d -p 8081:80 -v /var/log/myhttpd:/var/log/apache2 apache2

Trên terminal của docker host

$ cd /var/log/myhttpd

$ tail -f *.log

access: http://localhost:8081 trên browser

sẽ thấy log được updated

============================================================================

6, Sharing data giữa các containers

6.1, Data-only containers

là các container chịu trách nhiệm việc duy trì data

có 2 cách để tạo là:

- Tạo trong quá trình lauch container bằng việc config data volume và container's name

- Data volume được viết trong Dockerfile trong quá trình image  building, sau đó container có thể
được đặt tên trong quá trình lauch

*****

Examples:

- Lauch 1 data only container bằng việc dùng -v và --name option cho 'docker run'

$ sudo docker run --name datavol -v /DataMount busybox:latest /bin/true

dùng /bin/true vì ta ko có ý định thực hiện bất cứ operation nào trên container. chúng ta đặt tên cho container là datavol, và tạo 1 data volume là /DataMount . /bin/true command exit ngay lập tức với 0 exit status, nó stop container và tiếp tục stop trạng thái

=================================================

6.2, Mounting data volume từ các containers khác

Docker cung cấp 1 interface để share data volume từ container này tới container khác. docker tạo interface này qua --volume-from option của 'docker run'

'--volume-from' option lấy container name hoặc container id như input của nó và tự độn mount tất cả data volumes trên container đó. Docker cho phép mount nhiều containers với data volume bằng việc dùng
--volumes-from option nhiều lần

Example

- Tạo only data container

sudo docker run --name datavol -v /DataMount busybox:latest /bin/true

$ sudo docker run -it --volumes-from datavol ubuntu:16.04 /bin/bash

# mount | grep DataMount

=> /dev/sda8 on /DataMount type ext4 (rw,relatime,errors=remount-ro,data=ordered)

Như vậy chúng ta đã thành công mount data volume từ datavol data only container

- Inspect data volume của container này từ terminal khác:

$ sudo docker inspect --format='{{json .Mounts}}' 0f42a02d6978

[{"Name":"3388d0e2ab33780b539e4b494606827e8df0560b85a2864d66edd7e756d14c3b","Source":"/var/lib/docker/volumes/3388d0e2ab33780b539e4b494606827e8df0560b85a2864d66edd7e756d14c3b/_data","Destination":"/DataMount","Driver":"local","Mode":"","RW":true,"Propagation":""}]

- Tạo file trong /DataMount data volume và viết 1 số text

/# touch /DataMount/testfile
/# echo "Data Sharing between Container" > /DataMount/testfile

- Kiểm tra data trong volume
Từ một terminal khác:

$ sudo docker run --rm --volumes-from datavol busybox:latest cat /DataMount/testfile

=> Data Sharing between Container

output chính là data chúng ta đã viết trong /DataMount/testfile của datavol container

Như vậy, ta có thể sharing data giữa các containers bằng việc sharing data volumes. Ở đây chúng ta đã dùng data only container như base container cho data sharing. 

6.3, Một ví dụ khác về sharing data giữa các containers
Sharing log file của apache2 service qua nhiều containers

1, Tạo Dockerfile

##################################################################
# Docker file to build a LOG Volume for Apache2 Service
##################################################################
# Base image is Busy box
FROM busybox:latest
# Author hoang
MAINTAINER TranHuyHoang <hoangth92.nd@gmail.com>
# Create a data volume at /var/log/apache2, which is same as log directory PATH set for apache image 
VOLUME /var/log/apache2
# Execute command true
CMD ["/bin/true"]


2, Build image

sudo docker build -t apache2log .

3, Lauche data only container

$ sudo docker run --name log_vol apache2log

câu lệnh trên container sẽ tạo 1 data volume trong /var/log/apache2 và chuyển nó đến trạng thái stop

4, sudo docker ps -a

c0c4c388ca1e        apache2log                            "/bin/true"              About a minute ago   Exited (0) About a minute ago

5, Lauche container và mount /var/log/apache data volume từ log_vol

$ sudo docker run -d -p 8081:80 --volumes-from log_vol apache2

6, 

sudo docker run --rm --volumes-from log_vol busybox:latest ls -l /var/log/apache2 

total 4
-rw-r--r--    1 root     root             0 Feb 25 11:56 access.log
-rw-r--r--    1 root     root           461 Feb 25 11:56 error.log
-rw-r--r--    1 root     root             0 Feb 25 11:56 other_vhosts_access.log

7, Check nội dung file log từ container khác

$ sudo docker run --rm --volumes-from log_vol ubuntu:16.04 tail /var/log/apache2/error.log

======================================================================

7, Tránh những cạm bẫy phổ bién




